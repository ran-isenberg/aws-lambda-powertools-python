[tool.poetry]
name = "aws_lambda_powertools"
version = "2.0.0"
description = "A suite of utilities for AWS Lambda functions to ease adopting best practices such as tracing, structured logging, custom metrics, batching, idempotency, feature flags, and more."
authors = ["Amazon Web Services"]
include = ["aws_lambda_powertools/py.typed", "THIRD-PARTY-LICENSES"]
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]
repository="https://github.com/awslabs/aws-lambda-powertools-python"
readme = "README.md"
keywords = ["aws_lambda_powertools", "aws", "tracing", "logging", "lambda", "powertools", "feature_flags", "idempotency", "middleware"]
license = "MIT-0"

[tool.poetry.dependencies]
python = "^3.7.4"
aws-xray-sdk = { version = "^2.8.0", optional = true }
fastjsonschema = { version = "^2.14.5", optional = true }
pydantic = { version = "^1.8.2", optional = true }
boto3 = { version = "^1.20.32", optional = true }

[tool.poetry.dev-dependencies]
coverage = {extras = ["toml"], version = "^6.2"}
pytest = "^7.0.1"
black = "^22.8"
boto3 = "^1.18"
flake8-builtins = "^2.0.0"
flake8-comprehensions = "^3.7.0"
flake8-debugger = "^4.0.0"
flake8-fixme = "^1.1.1"
flake8-isort = "^4.1.2"
flake8-variables-names = "^0.0.4"
flake8-black = "^0.3.3"
isort = "^5.10.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.5.1"
pdoc3 = "^0.10.0"
pytest-asyncio = "^0.20.1"
bandit = "^1.7.1"
radon = "^5.1.0"
xenon = "^0.9.0"
flake8-eradicate = "^1.2.1"
flake8-bugbear = "^22.9.23"
mkdocs-git-revision-date-plugin = "^0.3.2"
mike = "^1.1.2"
mypy = "^0.971"
retry = "^0.9.2"
pytest-xdist = "^2.5.0"
aws-cdk-lib = "^2.47.0"
"aws-cdk.aws-apigatewayv2-alpha" = "^2.38.1-alpha.0"
"aws-cdk.aws-apigatewayv2-integrations-alpha" = "^2.38.1-alpha.0"
pytest-benchmark = "^3.4.1"
python-snappy = "^0.6.1"
mypy-boto3-appconfig = "^1.24.29"
mypy-boto3-cloudformation = "^1.24.0"
mypy-boto3-cloudwatch = "^1.24.35"
mypy-boto3-dynamodb = "^1.24.60"
mypy-boto3-lambda = "^1.24.0"
mypy-boto3-logs = "^1.24.0"
mypy-boto3-secretsmanager = "^1.24.11"
mypy-boto3-ssm = "^1.24.0"
mypy-boto3-s3 = "^1.24.0"
mypy-boto3-xray = "^1.24.0"
types-requests = "^2.28.11"
typing-extensions = "^4.4.0"
mkdocs-material = "^8.5.4"
filelock = "^3.8.0"
checksumdir = "^1.2.0"
mypy-boto3-appconfigdata = "^1.24.36"
importlib-metadata = "^4.13"

[tool.poetry.extras]
parser = ["pydantic"]
validation = ["fastjsonschema"]
tracer = ["aws-xray-sdk"]
all = ["pydantic", "aws-xray-sdk", "fastjsonschema"]
# allow customers to run code locally without emulators (SAM CLI, etc.)
aws-sdk = ["boto3"]

[tool.poetry.group.dev.dependencies]
cfn-lint = "0.67.0"

[tool.coverage.run]
source = ["aws_lambda_powertools"]
omit = ["tests/*", "aws_lambda_powertools/exceptions/*", "aws_lambda_powertools/utilities/parser/types.py", "aws_lambda_powertools/utilities/jmespath_utils/envelopes.py"]
branch = true

[tool.coverage.html]
directory = "test_report"
title = "Lambda Powertools Test Coverage"

[tool.coverage.report]
fail_under = 90
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Ignore runtime type checking
    "if TYPE_CHECKING:",

    # Ignore type function overload
    "@overload",
]

[tool.isort]
profile = "black" # resolves conflict with black
skip = "example"

[tool.black]
line-length = 120
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | example
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -vv"
testpaths = "./tests"
markers = [
    "perf: marks perf tests to be deselected (deselect with '-m \"not perf\"')",
]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

# NOTE
# As of now, Feb 2020, flake8 don't support pyproject
# For latest: https://github.com/flying-sheep/awesome-python-packaging
